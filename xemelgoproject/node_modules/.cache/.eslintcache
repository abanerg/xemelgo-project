[{"/Users/abanerjee/Desktop/Code/xemelgoproject/src/index.js":"1","/Users/abanerjee/Desktop/Code/xemelgoproject/src/App.js":"2","/Users/abanerjee/Desktop/Code/xemelgoproject/src/bcrypt.js":"3","/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/LogInPage.js":"4","/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/EmployeePage.js":"5","/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/ManagerPage.js":"6","/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/managerHelper.js":"7","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/index.js":"8","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/App.js":"9","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/ManagerPage.js":"10","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/EmployeePage.js":"11","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/LogInPage.js":"12","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/bcrypt.js":"13","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/managerHelper.js":"14"},{"size":214,"mtime":1676995949071,"results":"15","hashOfConfig":"16"},{"size":1512,"mtime":1677000825377,"results":"17","hashOfConfig":"16"},{"size":337,"mtime":1676988144021,"results":"18","hashOfConfig":"16"},{"size":2660,"mtime":1677012383236,"results":"19","hashOfConfig":"16"},{"size":5915,"mtime":1677010054789,"results":"20","hashOfConfig":"16"},{"size":5608,"mtime":1677010027248,"results":"21","hashOfConfig":"16"},{"size":306,"mtime":1677004169068,"results":"22","hashOfConfig":"16"},{"size":211,"mtime":1677016925017,"results":"23","hashOfConfig":"24"},{"size":1512,"mtime":1677016914242,"results":"25","hashOfConfig":"24"},{"size":6816,"mtime":1677015489382,"results":"26","hashOfConfig":"24"},{"size":5946,"mtime":1677013019334,"results":"27","hashOfConfig":"24"},{"size":2662,"mtime":1677013286537,"results":"28","hashOfConfig":"24"},{"size":337,"mtime":1676988144021,"results":"29","hashOfConfig":"24"},{"size":306,"mtime":1677004169068,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dzfaar",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yq7biw",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/Users/abanerjee/Desktop/Code/xemelgoproject/src/index.js",[],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/App.js",["78","79","80","81","82"],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/bcrypt.js",[],[],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/LogInPage.js",["83"],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/EmployeePage.js",["84"],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/ManagerPage.js",["85"],[],"/Users/abanerjee/Desktop/Code/xemelgoproject/src/Components/managerHelper.js",[],[],"/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/index.js",[],[],"/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/App.js",["86","87","88","89","90"],[],"/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/ManagerPage.js",["91"],[],"import React, { Component } from 'react';\nimport { Button, Form, Table } from 'react-bootstrap';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport managerHelper from './managerHelper'\nimport { ExportToCsv } from 'export-to-csv';\n\n\nconst dayjs = require('dayjs')\n\nclass ManagerPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.employee_id,\n            employees: [],\n            name: null,\n            lastname: null,\n            currentEmployeeId: null,\n            currentDate: null,\n            currentWorkLog: null\n        }\n    }\n\n    async componentDidMount() {\n        const firstResponse = await axios.put(this.props.server + \"/manager\", { employee_id: this.state.id });\n        const response = await axios.put(this.props.server + \"/manager/employee-list\");\n        console.log(response.data)\n        this.setState({\n            name: firstResponse.data[0].employee_name,\n            lastname: firstResponse.data[0].employee_surname,\n            employees: response.data\n        });\n    }\n\n    getWorkLog = async () => {\n        try {\n            const response = await axios.put(this.props.server + \"/manager/worklog\", {\n                employee_id: this.state.currentEmployeeId,\n                employee_date: this.state.currentDate\n            });\n            this.setState({\n                currentWorkLog: response.data\n            });\n        }\n        catch (e) {\n            console.log(\"Invalid worklog input\")\n        }\n    }\n\n    worklogGenerator() {\n        const ret = [];\n        console.log(this.state.currentWorkLog);\n        if (this.state.currentWorkLog) {\n            if (this.state.currentWorkLog[0].length > 0) {\n                console.log(\"here:\")\n                console.log(this.state.currentWorkLog);\n                const timesheet = this.state.currentWorkLog[0][0];\n                const jobs = this.state.currentWorkLog[1];\n                const totalWorkTime = managerHelper.timeWorked(timesheet.employee_clock_in, timesheet.employee_clock_out); //minutes\n                var totalJobTime = 0;\n                for (var i = 0; i < jobs.length; i++) {\n                    totalJobTime += managerHelper.timeWorked(jobs[i].job_start, jobs[i].job_end);\n                }\n                ret.push(<div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"10px\" }}>Total Work Time: {totalWorkTime.toFixed(2)} hours.</div>);\n                ret.push(<div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"10px\" }}>Total Job Time: {totalJobTime.toFixed(2)} hours.</div>);\n                ret.push(<div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"10px\" }}>Total Effiency: {((totalJobTime / totalWorkTime) * 100).toFixed(2)}%</div>);\n                ret.push(<div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"10px\" }}><Button onClick={\n                    () => {\n                        var data = [{\n                            totalWorkTime: totalWorkTime,\n                            totalJobTime: totalJobTime,\n                            effiency: (totalJobTime / totalWorkTime)\n                        }];\n                        const options = {\n                            fieldSeparator: ',',\n                            quoteStrings: '\"',\n                            decimalSeparator: '.',\n                            showLabels: true,\n                            showTitle: true,\n                            title: 'Worklog for employee #'+this.state.currentEmployeeId+\" on \"+this.state.currentDate,\n                            useTextFile: false,\n                            useBom: true,\n                            useKeysAsHeaders: true,\n                        };\n\n                        const csvExporter = new ExportToCsv(options);\n\n                        csvExporter.generateCsv(data);\n                    }\n                }>Download csv</Button></div>)\n                return ret;\n            }\n        }\n        ret.push(<div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"5px\" }}>No valid worklog loaded.</div>)\n        return ret;\n    }\n\n    tableGenerator() {\n        const ret = [];\n        for (var i = 0; i < this.state.employees.length; i++) {\n            ret.push(<tr>\n                <td>{this.state.employees[i][0].employee_id}</td>\n                <td>{this.state.employees[i][0].employee_name}</td>\n                <td>{this.state.employees[i][0].employee_surname}</td>\n            </tr>);\n        }\n        return ret;\n    }\n    render() {\n        return (\n            <>\n                <div style={{ textAlign: \"center\", margin: \"20px\" }}>\n                    <h3>Hello, {this.state.name} {this.state.lastname}</h3>\n                </div>\n                <div><Button style={{ float: \"right\", marginRight: \"60px\" }} onClick={this.props.logOutFunc}><h4>Log out</h4></Button></div>\n                <div style={{ display: \"flex\", justifyContent: \"center\", width: '300px', marginTop: \"20px\", marginLeft: \"40px\" }}><Table bordered hover size=\"sm\" striped=\"columns\" >\n                    <thead>\n                        <tr>\n                            <th>Employee #</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                        </tr>\n                    </thead>\n                    <tbody></tbody>\n                    {this.tableGenerator()}\n                </Table>\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"5px\" }}>\n                    <h4>Employee Worklog</h4>\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"5px\" }}>\n                    <Form style={{ width: '300px' }}>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Employee Number</Form.Label>\n                            <Form.Control onChange={(e) => this.setState({ currentEmployeeId: e.target.value })} type=\"email\" placeholder=\"#\" />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Date</Form.Label>\n                            <Form.Control onChange={(e) => this.setState({ currentDate: e.target.value })} type=\"email\" placeholder=\"YYYY-MM-DD\" />\n                        </Form.Group>\n                        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                            <Button onClick={this.getWorkLog} variant='primary'>Get worklog</Button> </div>\n                    </Form>\n\n                </div>\n                {this.worklogGenerator()}\n            </>\n        );\n    }\n}\n\nexport default ManagerPage; ",[],"/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/EmployeePage.js",["92"],[],"import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst dayjs = require('dayjs')\n\nclass EmployeePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.employee_id,\n            name: null,\n            lastname: null,\n            clockedin: false,\n            currentJobNumber: null,\n            currentJobStartTime: null,\n            currentJobEndTime: null,\n            statusMessage: null\n        }\n    }\n\n    async componentDidMount() {\n        const currentDate = dayjs().format('YYYY-MM-DD');\n        const response = await axios.put(this.props.server + \"/employee\", { employee_id: this.state.id, employee_date: currentDate });\n        console.log(\"response\");\n        this.setState({\n            name: response.data[0].employee_name,\n            lastname: response.data[0].employee_surname,\n        });\n    }\n\n    clockIn = async () => {\n        const currentDate = dayjs().format('YYYY-MM-DD');\n        const currentTime = dayjs().format('YYYY-MM-DD hh:mm:ss');\n        const response = await axios.put(this.props.server + \"/employee/clock-in\", {\n            employee_id: this.state.id,\n            employee_date: currentDate, employee_clock_in: currentTime\n        });\n        console.log(response.data.message);\n        this.setState({\n            clockedin: true\n        });\n    }\n\n    clockOut = async () => {\n        const currentDate = dayjs().format('YYYY-MM-DD');\n        const currentTime = dayjs().format('YYYY-MM-DD hh:mm:ss');\n        const response = await axios.put(this.props.server + \"/employee/clock-out\", {\n            employee_id: this.state.id,\n            employee_date: currentDate, employee_clock_out: currentTime\n        });\n        console.log(response.data.message);\n        this.setState({\n            clockedin: false\n        });\n        this.props.logOutFunc();\n    }\n\n    submitJob = async () => {\n        try {\n            const date = this.state.currentJobStartTime.substring(0, 10);\n            const response = await axios.post(this.props.server + \"/employee\", {\n                employee_id: this.state.id,\n                job_date: date, job_number: this.state.currentJobNumber, job_start: this.state.currentJobStartTime,\n                job_end: this.state.currentJobEndTime\n            });\n            this.setState({\n                statusMessage: response.data.message\n            })\n        }\n        catch (e) {\n            console.log(\"Invalid job input\");\n            this.setState({\n                statusMessage: \"Invalid job input.\"\n            })\n        }\n    }\n\n    validateJobState = () => {\n        let value = this.state.currentJobNumber;\n        const numberCheck = !isNaN(value) &&\n            parseInt(Number(value)) == value &&\n            !isNaN(parseInt(value, 10));\n        let startCheck = dayjs(this.state.currentJobStartTime, 'YYYY-MM-DD hh:mm:ss', true).isValid();\n        let endCheck = dayjs(this.state.currentJobStartTime, 'YYYY-MM-DD hh:mm:ss', true).isValid();\n        return numberCheck && startCheck && endCheck;\n    }\n\n    renderStatus() {\n        const ret = [];\n        if (this.state.statusMessage) {\n            ret.push(<div style={{marginTop:\"10px\"}}>{this.state.statusMessage}</div>)\n            return ret; \n        }\n        else {\n            return ret; \n        }\n    }\n\n    render() {\n        if (!this.state.clockedin) {\n            return (\n                <>\n                    <div>\n                        <h3 style={{ textAlign: \"center\", margin: \"20px\" }}>Hello, {this.state.name} {this.state.lastname}</h3>\n                        <div><Button style={{ float: \"right\", marginRight: \"60px\" }} onClick={this.props.logOutFunc}><h4>Log out</h4></Button>\n                        <div style={{marginLeft:\"150px\",}}><Button onClick={this.clockIn} variant=\"primary\"><h4>Clock-in</h4></Button></div>\n                        </div>\n                       \n                    </div>\n                </>\n            );\n        }\n        else {\n            return (\n                <>\n                    <h3 style={{ textAlign: \"center\", margin: \"20px\" }}>Hello, {this.state.name} {this.state.lastname}</h3>\n                    <><Button style={{ float: \"right\", marginRight: \"60px\" }} onClick={this.clockOut} variant=\"primary\"><h4>Clock-out and Log-out</h4></Button></>\n                    <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"30px\", marginLeft: \"280px\" }}>\n                    <Form style={{ width: '300px'}}>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Job Number</Form.Label>\n                            <Form.Control onChange={(e) => this.setState({ currentJobNumber: e.target.value })} type=\"email\" placeholder=\"#\" />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Job Start Time</Form.Label>\n                            <Form.Control onChange={(e) => this.setState({ currentJobStartTime: e.target.value })} type=\"email\" placeholder=\"YYYY-MM-DD hh:mm:ss\" />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Job End Time</Form.Label>\n                            <Form.Control onChange={(e) => this.setState({ currentJobEndTime: e.target.value })} type=\"email\" placeholder=\"YYYY-MM-DD hh:mm:ss\" />\n                        </Form.Group>\n                        <Button style={{ textAlign: \"center\"}} onClick={this.submitJob} variant=\"primary\">Submit Job</Button>\n                        {this.renderStatus()}\n                    </Form>\n                    </div>\n                </>\n            );\n        }\n    }\n}\n\nexport default EmployeePage; ","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/LogInPage.js",["93"],[],"import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ChangeEvent from 'react';\n\nconst bcrypt = require('../bcrypt');\n\nclass LogInPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: null,\n      password: null,\n      statusMessage: null,\n    }\n  }\n\n  \n  onLogIn = async () => {\n    try {\n      if (this.state.username && this.state.password) {\n        const response = await axios.put(this.props.server + \"/log-in\", { employee_username: this.state.username });\n        if (response.data.length > 0) {\n          const val = bcrypt.hashPassword(this.state.password);\n          console.log(val);\n          const comparison = await bcrypt.comparePasswords(this.state.password, response.data[0].employee_password);\n          if (comparison) {\n            this.props.logIn(response.data[0].employee_id, response.data[0].employee_manstatus)\n          }\n          else {\n            this.setState({\n              statusMessage: \"Incorrect password\"\n            })\n          }\n        }\n        else {\n          this.setState({\n            statusMessage: \"No such username\"\n          })\n          \n        }\n      }\n    }\n    catch (e) {\n      alert(\"Server error.\");\n    }\n  }\n\n  renderStatus() {\n    const ret = [];\n    if (this.state.statusMessage) {\n      ret.push(<div style={{ display: \"flex\", justifyContent: \"center\"}}>{this.state.statusMessage}</div>)\n      return ret; \n    }\n    return ret; \n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" , marginTop:\"20px\"}}>\n        <h2>Log-in To Work Time Logging</h2>\n        <div>\n          <Form>\n            <div style={{ display: \"flex\", justifyContent: \"center\"}}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control onChange={(e) => this.setState({ username: e.target.value })} type=\"email\" placeholder=\"Enter username\" />\n            </Form.Group>\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\"}}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control onChange={(e) => this.setState({ password: e.target.value })} type=\"password\" placeholder=\"Enter password\" />\n            </Form.Group>\n            </div>\n          </Form>\n          <Button onClick={this.onLogIn} variant=\"primary\">Log-in</Button>\n        </div>\n        {this.renderStatus()}\n      </div>\n    );\n\n  }\n}\n\nexport default LogInPage;\n","/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/bcrypt.js",[],[],"/Users/abanerjee/Desktop/Code/xemelgo/xemelgoproject/src/Components/managerHelper.js",[],[],{"ruleId":"94","severity":1,"message":"95","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":18},{"ruleId":"94","severity":1,"message":"98","line":2,"column":20,"nodeType":"96","messageId":"97","endLine":2,"endColumn":29},{"ruleId":"94","severity":1,"message":"99","line":8,"column":8,"nodeType":"96","messageId":"97","endLine":8,"endColumn":14},{"ruleId":"94","severity":1,"message":"100","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":49,"column":36,"nodeType":"103","messageId":"104","endLine":49,"endColumn":38},{"ruleId":"94","severity":1,"message":"105","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":83,"column":37,"nodeType":"103","messageId":"104","endLine":83,"endColumn":39},{"ruleId":"94","severity":1,"message":"106","line":8,"column":7,"nodeType":"96","messageId":"97","endLine":8,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":18},{"ruleId":"94","severity":1,"message":"98","line":2,"column":20,"nodeType":"96","messageId":"97","endLine":2,"endColumn":29},{"ruleId":"94","severity":1,"message":"99","line":8,"column":8,"nodeType":"96","messageId":"97","endLine":8,"endColumn":14},{"ruleId":"94","severity":1,"message":"100","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":49,"column":36,"nodeType":"103","messageId":"104","endLine":49,"endColumn":38},{"ruleId":"94","severity":1,"message":"106","line":9,"column":7,"nodeType":"96","messageId":"97","endLine":9,"endColumn":12},{"ruleId":"101","severity":1,"message":"102","line":83,"column":37,"nodeType":"103","messageId":"104","endLine":83,"endColumn":39},{"ruleId":"94","severity":1,"message":"105","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":19},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ChangeEvent' is defined but never used.","'dayjs' is assigned a value but never used."]